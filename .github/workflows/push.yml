name: Keboola Component Build & Deploy Pipeline
on:
  push:
    branches:
      - 'feature/*'
      - 'bug/*'
    tags:
      - '*' # Skip the workflow on the main branch without tags

concurrency: ci-${{ github.ref }} # to avoid tag collisions in the ECR
env:
  # repository variables:
  KBC_DEVELOPERPORTAL_APP: "kds-team.ex-hubspot-crm" # replace with your component id
  KBC_DEVELOPERPORTAL_VENDOR: "kds-team" # replace with your vendor
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
  KBC_DEVELOPERPORTAL_USERNAME: ${{ vars.KBC_DEVELOPERPORTAL_USERNAME }}

  # repository secrets:
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }} # recommended for pushing to ECR
  KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}

  # (Optional) Test KBC project: https://connection.keboola.com/admin/projects/0000
  KBC_TEST_PROJECT_CONFIGS: "" # space separated list of config ids
  KBC_STORAGE_TOKEN: ${{ secrets.KBC_STORAGE_TOKEN }} # required for running KBC tests

jobs:
  check_version:
    name: Check Version and Branch
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.check.outputs.version }}
      has_version_change: ${{ steps.check.outputs.has_version_change }}
      is_semantic_tag: ${{ steps.tag_check.outputs.is_semantic_tag }}
      image_tag: ${{ steps.set_tag.outputs.image_tag }}
      should_deploy: ${{ steps.deploy_check.outputs.should_deploy }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check version change
        id: check
        uses: ./.github/actions/check-version-change
        with:
          component: ${{ inputs.component_dir }}

      - name: Check if semantic tag
        id: tag_check
        run: |
          # Get current branch/tag name
          ref_name="${{ github.ref }}"
          name="${ref_name#refs/tags/}"
          name="${name#refs/heads/}"
          echo "Current ref name: $name"
          
          # Check if semantic version
          if echo "$name" | grep -qE '^([a-zA-Z0-9-]+-)?([0-9]+\.[0-9]+\.[0-9]+)$'; then
            echo "Valid semantic version detected"
            echo "is_semantic_tag=true" >> $GITHUB_OUTPUT
          else
            echo "Not a semantic version"
            echo "is_semantic_tag=false" >> $GITHUB_OUTPUT
          fi

      - name: Set image tag
        id: set_tag
        run: |
          if [ "${{ steps.tag_check.outputs.is_semantic_tag }}" = "true" ] && \
             [ "${{ steps.check.outputs.has_version_change }}" = "true" ]; then
            # Pro semantický tag s novou verzí použijeme verzi z VERSION
            echo "image_tag=${{ steps.check.outputs.version }}" >> $GITHUB_OUTPUT
          else
            # Pro ostatní případy použijeme název větve za posledním lomítkem
            branch_name="${GITHUB_REF#refs/heads/}"
            branch_name="${branch_name#refs/tags/}"
            image_tag="${branch_name##*/}"
            echo "image_tag=$image_tag" >> $GITHUB_OUTPUT
          fi

      - name: Check if should deploy
        id: deploy_check
        run: |
          if [ "${{ steps.tag_check.outputs.is_semantic_tag }}" = "true" ] && \
             [ "${{ steps.check.outputs.has_version_change }}" = "true" ]; then
            echo "Conditions met - will deploy"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "Conditions not met - will not deploy"
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  build:
    name: Docker Image Build
    runs-on: ubuntu-latest
    needs: [ check_version ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ inputs.component_dir }}/Dockerfile
          tags: ${{ inputs.kbc_developerportal_app }}:latest
          outputs: type=docker,dest=/tmp/${{ inputs.kbc_developerportal_app }}.tar
          build-args: |
            KBC_DEVELOPERPORTAL_APP=${{ inputs.kbc_developerportal_app }}
            KBC_DEVELOPERPORTAL_VENDOR=${{ inputs.kbc_developerportal_vendor }}
            KBC_DEVELOPERPORTAL_USERNAME=${{ secrets.KBC_DEVELOPERPORTAL_USERNAME }}
            KBC_DEVELOPERPORTAL_PASSWORD=${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ inputs.kbc_developerportal_app }}.tar
          docker image ls -a
          docker run ${{ inputs.kbc_developerportal_app }}:latest flake8 . --config=flake8.cfg
          echo "Running unit-tests..."
          docker run ${{ inputs.kbc_developerportal_app }}:latest python -m unittest discover

      - name: Load Image
        run: |
          docker load --input /tmp/${{ inputs.kbc_developerportal_app }}.tar
          docker image ls -a

      - name: Docker login
        run: docker login --username "${{ secrets.DOCKERHUB_USER }}" --password "${{ secrets.DOCKERHUB_TOKEN }}"

      - name: Push image to ECR
        uses: keboola/action-push-to-ecr@master
        with:
          vendor: ${{ inputs.kbc_developerportal_vendor }}
          app_id: ${{ inputs.kbc_developerportal_app }}
          username: ${{ secrets.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.check_version.outputs.image_tag }}
          push_latest: ${{ needs.check_version.outputs.should_deploy }}
          source_image: ${{ inputs.kbc_developerportal_app }}

  tests-kbc:
    name: Run KBC Tests
    needs: [ check_version, build ]
    runs-on: ubuntu-latest
    steps:
      - name: Set up environment variables
        run: |
          echo "KBC_TEST_PROJECT_CONFIGS=${KBC_TEST_PROJECT_CONFIGS}" >> $GITHUB_ENV
          echo "KBC_STORAGE_TOKEN=${{ secrets.KBC_STORAGE_TOKEN }}" >> $GITHUB_ENV

      - name: Run KBC test jobs

        uses: keboola/action-run-configs-parallel@master
        with:
          token: ${{ secrets.KBC_STORAGE_TOKEN }}
          componentId: ${{ inputs.kbc_developerportal_app }}
          tag: ${{ needs.check_version.outputs.image_tag }}
          configs: ${{ env.KBC_TEST_PROJECT_CONFIGS }}

  deploy:
    name: Deploy to KBC and update Developer Portal
    needs: [ check_version, build]
    if: needs.check_version.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Set Developer Portal Tag
        uses: keboola/action-set-tag-developer-portal@master
        with:
          vendor: ${{ inputs.kbc_developerportal_vendor }}
          app_id: ${{ inputs.kbc_developerportal_app }}
          username: ${{ secrets.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.check_version.outputs.image_tag }}

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update developer portal properties
        env:
          KBC_DEVELOPERPORTAL_USERNAME: ${{ secrets.KBC_DEVELOPERPORTAL_USERNAME }}
          KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          KBC_DEVELOPERPORTAL_VENDOR: ${{ inputs.kbc_developerportal_vendor }}
          KBC_DEVELOPERPORTAL_APP: ${{ inputs.kbc_developerportal_app }}
        run: |
          cd ${{ inputs.component_dir }}
          chmod +x scripts/developer_portal/*.sh
          scripts/developer_portal/update_properties.sh